#ifndef _DATA_STRUCTS_H_
#define _DATA_STRUCTS_H_

#include "Boolean.h"

#define taskNumber 11

void Communicate(void* data); // for measure

extern unsigned long startingTime;
extern unsigned long systemTimeBase;

extern int isCuffReady;

extern Bool bpHigh1;
extern Bool bpHigh2;
extern Bool tempHigh;
extern Bool pulseLow;
extern Bool respLow;

extern Bool taskFlags[taskNumber];

extern Bool batteryLow;
extern Bool batteryDead;

extern unsigned long debounce;
extern unsigned char cuffInflation;

extern unsigned char bpOutOfRange;
extern unsigned char tempOutOfRange;
extern unsigned char pulseOutOfRange;
extern unsigned char respOutOfRange;

typedef struct TCB TCB;
typedef struct TCB_ll TCB_ll;
extern TCB_ll llTCB;
extern TCB_ll llData;
extern TCB dataList[6];

struct TCB_ll {
  TCB* head;
  TCB* tail;
};

struct TCB {
  void (*myTask)(void*);
  void* taskDataPtr;
  TCB* prev;
  TCB* next;
};

void del(TCB* node, TCB_ll* ll);
void insert(TCB* node, TCB_ll* ll);
bool check(TCB* node, TCB_ll* ll);

typedef enum {NONE, TEMP, BLOOD1, BLOOD2, PULSE, RESP} dt;
typedef enum {NON, I, S, P, M, W} sig;
typedef enum {MEAS, ANUN} menu;

extern sig commSig;

extern unsigned int tRawId, bp1RawId, bp2RawId, prRawId, rrRawId, tCorrId, bp1CorrId, bp2CorrId, prCorrId, rrCorrId;

typedef struct {
  unsigned int* temperatureRawBuf;
  unsigned int* bloodPressRawBuf;
  unsigned int* pulseRateRawBuf;
  unsigned int* respRateRawBuf;
  dt* measurementSelection;
} MeasureData;

typedef MeasureData CommunicateData; // they are the same

//extern dt measurementSelection; // for scheduler, REMOVE LATER
//extern dt alarmAcknowledge; // for scheduler, REMOVE LATER

extern dt menuMeas;
extern menu Menu;

typedef struct {
  unsigned int* temperatureRawBuf;
  unsigned int* bloodPressRawBuf;
  unsigned int* pulseRateRawBuf;
  unsigned int* respRateRawBuf;
  unsigned char* tempCorrectedBuff;
  unsigned char* bloodPressCorrectedBuf;
  unsigned char* pulseRateCorrectedBuf;
  unsigned char* respRateCorrectedBuf;
  dt* measurementSelection;
} ComputeData;

//extern ComputeData computeData; // delete this later, USED FOR RANDOMLY SELECTING MEASUREMENT TO UPDATE

typedef struct {
  unsigned char* tempCorrectedBuff;
  unsigned char* bloodPressCorrectedBuf;
  unsigned char* pulseRateCorrectedBuf;
  unsigned char* respRateCorrectedBuf;
  unsigned int* EKGFreqBuff;
  unsigned short* batteryState;
} DisplayData;

typedef DisplayData RemoteDispData; // they are the same

typedef struct {
  unsigned int* temperatureRawBuf;
  unsigned int* bloodPressRawBuf;
  unsigned int* pulseRateRawBuf;
  unsigned int* respRateRawBuf;
  unsigned int* EKGFreqBuff;
  unsigned short* batteryState;
  dt* alarmAcknowledge;
} WarningAlarmData;

typedef struct {
  unsigned short* batteryState;
} StatusData;

typedef struct {
  dt* measurementSelection;
  dt* alarmAcknowledge;
} KeypadData;

typedef KeypadData RemoteCommData;

typedef struct {
  unsigned int* EKGRawBuff;
  unsigned int* EKGFreqBuff;
} EKGData;

#define PI 3.141592

#define FREQ 200 //(Hz)
#define PHI_STEPS 256
#define V_AMP 2047

#define OMEGA (PI*FREQ*2.0)
#define T (1000000/FREQ) // microseconds
#define DT (T/PHI_STEPS) // microseconds
/*
static int sine_wave[] = {
  0x7ff, 0x832, 0x866, 0x899, 0x8cc, 0x900, 0x933, 0x965, 0x998, 0x9ca,
  0x9fc, 0xa2e, 0xa5f, 0xa90, 0xac0, 0xaf1, 0xb20, 0xb4f, 0xb7e, 0xbac,
  0xbd9, 0xc06, 0xc32, 0xc5d, 0xc88, 0xcb2, 0xcdb, 0xd04, 0xd2c, 0xd52,
  0xd78, 0xd9d, 0xdc1, 0xde5, 0xe07, 0xe28, 0xe49, 0xe68, 0xe86, 0xea3,
  0xebf, 0xeda, 0xef4, 0xf0d, 0xf25, 0xf3b, 0xf50, 0xf65, 0xf78, 0xf89,
  0xf9a, 0xfa9, 0xfb7, 0xfc4, 0xfcf, 0xfda, 0xfe3, 0xfea, 0xff1, 0xff6,
  0xffa, 0xffd, 0xffe, 0xffe, 0xffd, 0xffa, 0xff6, 0xff1, 0xfea, 0xfe3,
  0xfda, 0xfcf, 0xfc4, 0xfb7, 0xfa9, 0xf9a, 0xf89, 0xf78, 0xf65, 0xf50,
  0xf3b, 0xf25, 0xf0d, 0xef4, 0xeda, 0xebf, 0xea3, 0xe86, 0xe68, 0xe49,
  0xe28, 0xe07, 0xde5, 0xdc1, 0xd9d, 0xd78, 0xd52, 0xd2c, 0xd04, 0xcdb,
  0xcb2, 0xc88, 0xc5d, 0xc32, 0xc06, 0xbd9, 0xbac, 0xb7e, 0xb4f, 0xb20,
  0xaf1, 0xac0, 0xa90, 0xa5f, 0xa2e, 0x9fc, 0x9ca, 0x998, 0x965, 0x933,
  0x900, 0x8cc, 0x899, 0x866, 0x832, 0x7ff, 0x7cc, 0x798, 0x765, 0x732,
  0x6fe, 0x6cb, 0x699, 0x666, 0x634, 0x602, 0x5d0, 0x59f, 0x56e, 0x53e,
  0x50d, 0x4de, 0x4af, 0x480, 0x452, 0x425, 0x3f8, 0x3cc, 0x3a1, 0x376,
  0x34c, 0x323, 0x2fa, 0x2d2, 0x2ac, 0x286, 0x261, 0x23d, 0x219, 0x1f7,
  0x1d6, 0x1b5, 0x196, 0x178, 0x15b, 0x13f, 0x124, 0x10a, 0xf1, 0xd9,
  0xc3, 0xae, 0x99, 0x86, 0x75, 0x64, 0x55, 0x47, 0x3a, 0x2f,
  0x24, 0x1b, 0x14, 0xd, 0x8, 0x4, 0x1, 0x0, 0x0, 0x1,
  0x4, 0x8, 0xd, 0x14, 0x1b, 0x24, 0x2f, 0x3a, 0x47, 0x55,
  0x64, 0x75, 0x86, 0x99, 0xae, 0xc3, 0xd9, 0xf1, 0x10a, 0x124,
  0x13f, 0x15b, 0x178, 0x196, 0x1b5, 0x1d6, 0x1f7, 0x219, 0x23d, 0x261,
  0x286, 0x2ac, 0x2d2, 0x2fa, 0x323, 0x34c, 0x376, 0x3a1, 0x3cc, 0x3f8,
  0x425, 0x452, 0x480, 0x4af, 0x4de, 0x50d, 0x53e, 0x56e, 0x59f, 0x5d0,
  0x602, 0x634, 0x666, 0x699, 0x6cb, 0x6fe, 0x732, 0x765, 0x798, 0x7cc,
  0x7ff, 0x832, 0x866, 0x899, 0x8cc, 0x900,
};
*/

#endif // _DATA_STRUCTS_H_

